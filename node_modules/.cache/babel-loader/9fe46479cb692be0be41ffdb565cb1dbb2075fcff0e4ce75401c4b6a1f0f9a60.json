{"ast":null,"code":"import Airtable from 'airtable';\nconst base = new Airtable({\n  apiKey: process.env.REACT_APP_AIRTABLE_API_KEY\n}).base('appuojNVDfs9U7ccy');\nexport const fetchAirtableData = async () => {\n  try {\n    const records = await base('tbl60mtZmcPavvtQH').select().all();\n    const data = records.map(record => record.fields);\n\n    // Helper function to parse date\n    const parseDate = dateStr => {\n      const date = new Date(dateStr);\n      return date instanceof Date && !isNaN(date) ? date : null;\n    };\n    console.log('Processed Divisionsхуйхуйхуйхуйхуйхуйхуй:', data);\n    // Process the data to get ranges and categories\n    const processedData = {\n      phases: [...new Set(data.map(item => Number(item.Phase) || 0))],\n      // Simplified division processing\n      divisions: [...new Set(data.map(item => item.Division))],\n      // .filter(Boolean)\n      // .map(div => String(div).trim())\n      // .filter(div => div !== '')\n      // .sort((a, b) => {\n      //     // Convert strings to numbers for proper numerical sorting\n      //     const numA = Number(a.replace(/\\D/g, ''));\n      //     const numB = Number(b.replace(/\\D/g, ''));\n      //     return numA - numB;\n      // })\n      // .map(div => ({\n      //     value: div,\n      //     label: `Division ${div}`\n      // })),\n      wbsCategories: [...new Set(data.map(item => item['WBS Category Level 1']))].filter(Boolean).sort().map(cat => ({\n        value: cat,\n        label: cat\n      })),\n      durations: data.map(item => Number(item.Duration) || 0),\n      startDates: data.map(item => parseDate(item['Start Date'])).filter(Boolean),\n      endDates: data.map(item => parseDate(item['End Date'])).filter(Boolean)\n    };\n\n    // Get min and max dates\n    const minStartDate = processedData.startDates.length ? new Date(Math.min(...processedData.startDates)) : null;\n    const maxEndDate = processedData.endDates.length ? new Date(Math.max(...processedData.endDates)) : null;\n\n    // Log for debugging\n    console.log('Processed Divisions:', processedData.divisions);\n    console.log('Date Range:', {\n      min: minStartDate,\n      max: maxEndDate\n    });\n\n    // Add this console.log before returning the data\n    console.log('Raw Division Data:', data.map(item => item.Division));\n    console.log('Processed Divisions:', processedData.divisions);\n    return {\n      raw: data,\n      processed: processedData,\n      ranges: {\n        phase: [Math.min(...processedData.phases), Math.max(...processedData.phases)],\n        duration: [Math.min(...processedData.durations), Math.max(...processedData.durations)],\n        dates: {\n          min: minStartDate,\n          max: maxEndDate\n        }\n      }\n    };\n  } catch (error) {\n    console.error('Error fetching Airtable data:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["Airtable","base","apiKey","process","env","REACT_APP_AIRTABLE_API_KEY","fetchAirtableData","records","select","all","data","map","record","fields","parseDate","dateStr","date","Date","isNaN","console","log","processedData","phases","Set","item","Number","Phase","divisions","Division","wbsCategories","filter","Boolean","sort","cat","value","label","durations","Duration","startDates","endDates","minStartDate","length","Math","min","maxEndDate","max","raw","processed","ranges","phase","duration","dates","error"],"sources":["/home/vl_kuz/DAViN/src/services/airtable.js"],"sourcesContent":["import Airtable from 'airtable';\n\nconst base = new Airtable({\n    apiKey: process.env.REACT_APP_AIRTABLE_API_KEY\n}).base('appuojNVDfs9U7ccy');\n\nexport const fetchAirtableData = async () => {\n    try {\n        const records = await base('tbl60mtZmcPavvtQH').select().all();\n        const data = records.map(record => record.fields);\n\n        // Helper function to parse date\n        const parseDate = (dateStr) => {\n            const date = new Date(dateStr);\n            return date instanceof Date && !isNaN(date) ? date : null;\n        };\n        console.log('Processed Divisionsхуйхуйхуйхуйхуйхуйхуй:', data);\n        // Process the data to get ranges and categories\n        const processedData = {\n            phases: [...new Set(data.map(item => Number(item.Phase) || 0))],\n            // Simplified division processing\n            divisions: [...new Set(data.map(item => item.Division))],\n            // .filter(Boolean)\n            // .map(div => String(div).trim())\n            // .filter(div => div !== '')\n            // .sort((a, b) => {\n            //     // Convert strings to numbers for proper numerical sorting\n            //     const numA = Number(a.replace(/\\D/g, ''));\n            //     const numB = Number(b.replace(/\\D/g, ''));\n            //     return numA - numB;\n            // })\n            // .map(div => ({\n            //     value: div,\n            //     label: `Division ${div}`\n            // })),\n            wbsCategories: [...new Set(data.map(item => item['WBS Category Level 1']))]\n                .filter(Boolean)\n                .sort()\n                .map(cat => ({\n                    value: cat,\n                    label: cat\n                })),\n            durations: data.map(item => Number(item.Duration) || 0),\n            startDates: data.map(item => parseDate(item['Start Date'])).filter(Boolean),\n            endDates: data.map(item => parseDate(item['End Date'])).filter(Boolean)\n        };\n\n\n        // Get min and max dates\n        const minStartDate = processedData.startDates.length\n            ? new Date(Math.min(...processedData.startDates))\n            : null;\n\n        const maxEndDate = processedData.endDates.length\n            ? new Date(Math.max(...processedData.endDates))\n            : null;\n\n        // Log for debugging\n        console.log('Processed Divisions:', processedData.divisions);\n        console.log('Date Range:', { min: minStartDate, max: maxEndDate });\n\n        // Add this console.log before returning the data\n        console.log('Raw Division Data:', data.map(item => item.Division));\n        console.log('Processed Divisions:', processedData.divisions);\n\n        return {\n            raw: data,\n            processed: processedData,\n            ranges: {\n                phase: [Math.min(...processedData.phases), Math.max(...processedData.phases)],\n                duration: [Math.min(...processedData.durations), Math.max(...processedData.durations)],\n                dates: {\n                    min: minStartDate,\n                    max: maxEndDate\n                }\n            }\n        };\n    } catch (error) {\n        console.error('Error fetching Airtable data:', error);\n        return null;\n    }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}