{"ast":null,"code":"import Airtable from 'airtable';\nconst base = new Airtable({\n  apiKey: process.env.REACT_APP_AIRTABLE_API_KEY\n}).base('appuojNVDfs9U7ccy');\nexport const fetchAirtableData = async () => {\n  try {\n    const records = await base('tbl60mtZmcPavvtQH').select().all();\n    const data = records.map(record => record.fields);\n\n    // Helper function to parse date\n    const parseDate = dateStr => {\n      const date = new Date(dateStr);\n      return date instanceof Date && !isNaN(date) ? date : null;\n    };\n\n    // Process the data to get ranges and categories\n    const processedData = {\n      phases: [...new Set(data.map(item => Number(item.Phase) || 0))],\n      // Fix division processing\n      divisions: data.map(item => ({\n        division: item.Division,\n        name: item['Division'] // Assuming there's a Division Name field\n      })).filter(item => item.division && item.name) // Filter out empty values\n      .reduce((unique, item) => {\n        // Remove duplicates\n        if (!unique.some(u => u.value === item.division)) {\n          unique.push({\n            value: item.division,\n            label: `${item.division} - ${item.name}`\n          });\n        }\n        return unique;\n      }, []).sort((a, b) => a.label.localeCompare(b.label)),\n      wbsCategories: [...new Set(data.map(item => item['WBS Category Level 1']))].filter(Boolean).sort().map(cat => ({\n        value: cat,\n        label: cat\n      })),\n      durations: data.map(item => Number(item.Duration) || 0),\n      startDates: data.map(item => parseDate(item['Start Date'])).filter(Boolean),\n      endDates: data.map(item => parseDate(item['End Date'])).filter(Boolean)\n    };\n\n    // Get min and max dates\n    const minStartDate = processedData.startDates.length ? new Date(Math.min(...processedData.startDates)) : null;\n    const maxEndDate = processedData.endDates.length ? new Date(Math.max(...processedData.endDates)) : null;\n\n    // Log for debugging\n    console.log('Processed Divisions:', processedData.divisions);\n    console.log('Date Range:', {\n      min: minStartDate,\n      max: maxEndDate\n    });\n    return {\n      raw: data,\n      processed: processedData,\n      ranges: {\n        phase: [Math.min(...processedData.phases), Math.max(...processedData.phases)],\n        duration: [Math.min(...processedData.durations), Math.max(...processedData.durations)],\n        dates: {\n          min: minStartDate,\n          max: maxEndDate\n        }\n      }\n    };\n  } catch (error) {\n    console.error('Error fetching Airtable data:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["Airtable","base","apiKey","process","env","REACT_APP_AIRTABLE_API_KEY","fetchAirtableData","records","select","all","data","map","record","fields","parseDate","dateStr","date","Date","isNaN","processedData","phases","Set","item","Number","Phase","divisions","division","Division","name","filter","reduce","unique","some","u","value","push","label","sort","a","b","localeCompare","wbsCategories","Boolean","cat","durations","Duration","startDates","endDates","minStartDate","length","Math","min","maxEndDate","max","console","log","raw","processed","ranges","phase","duration","dates","error"],"sources":["/home/vl_kuz/DAViN/src/services/airtable.js"],"sourcesContent":["import Airtable from 'airtable';\n\nconst base = new Airtable({\n    apiKey: process.env.REACT_APP_AIRTABLE_API_KEY\n}).base('appuojNVDfs9U7ccy');\n\nexport const fetchAirtableData = async () => {\n    try {\n        const records = await base('tbl60mtZmcPavvtQH').select().all();\n        const data = records.map(record => record.fields);\n\n        // Helper function to parse date\n        const parseDate = (dateStr) => {\n            const date = new Date(dateStr);\n            return date instanceof Date && !isNaN(date) ? date : null;\n        };\n\n        // Process the data to get ranges and categories\n        const processedData = {\n            phases: [...new Set(data.map(item => Number(item.Phase) || 0))],\n            // Fix division processing\n            divisions: data\n                .map(item => ({\n                    division: item.Division,\n                    name: item['Division'] // Assuming there's a Division Name field\n                }))\n                .filter(item => item.division && item.name) // Filter out empty values\n                .reduce((unique, item) => {\n                    // Remove duplicates\n                    if (!unique.some(u => u.value === item.division)) {\n                        unique.push({\n                            value: item.division,\n                            label: `${item.division} - ${item.name}`\n                        });\n                    }\n                    return unique;\n                }, [])\n                .sort((a, b) => a.label.localeCompare(b.label)),\n            wbsCategories: [...new Set(data.map(item => item['WBS Category Level 1']))]\n                .filter(Boolean)\n                .sort()\n                .map(cat => ({\n                    value: cat,\n                    label: cat\n                })),\n            durations: data.map(item => Number(item.Duration) || 0),\n            startDates: data.map(item => parseDate(item['Start Date'])).filter(Boolean),\n            endDates: data.map(item => parseDate(item['End Date'])).filter(Boolean)\n        };\n\n        // Get min and max dates\n        const minStartDate = processedData.startDates.length\n            ? new Date(Math.min(...processedData.startDates))\n            : null;\n\n        const maxEndDate = processedData.endDates.length\n            ? new Date(Math.max(...processedData.endDates))\n            : null;\n\n        // Log for debugging\n        console.log('Processed Divisions:', processedData.divisions);\n        console.log('Date Range:', { min: minStartDate, max: maxEndDate });\n\n        return {\n            raw: data,\n            processed: processedData,\n            ranges: {\n                phase: [Math.min(...processedData.phases), Math.max(...processedData.phases)],\n                duration: [Math.min(...processedData.durations), Math.max(...processedData.durations)],\n                dates: {\n                    min: minStartDate,\n                    max: maxEndDate\n                }\n            }\n        };\n    } catch (error) {\n        console.error('Error fetching Airtable data:', error);\n        return null;\n    }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}