{"ast":null,"code":"import Airtable from 'airtable';\nconst base = new Airtable({\n  apiKey: process.env.REACT_APP_AIRTABLE_API_KEY\n}).base('appuojNVDfs9U7ccy');\nexport const fetchAirtableData = async () => {\n  try {\n    const records = await base('tbl60mtZmcPavvtQH').select().all();\n    const data = records.map(record => record.fields);\n\n    // Log all fields from the first few records to see the structure\n    console.log('Sample Records:', data.slice(0, 3));\n    console.log('Available Fields:', Object.keys(data[0] || {}));\n\n    // Helper function to parse date\n    const parseDate = dateStr => {\n      const date = new Date(dateStr);\n      return date instanceof Date && !isNaN(date) ? date : null;\n    };\n\n    // Process the data to get ranges and categories\n    const processedData = {\n      phases: [...new Set(data.map(item => Number(item.Phase) || 0))],\n      // Update division processing to use division and CSI Name\n      divisions: [...new Set(data.map(item => ({\n        division: item.division,\n        csiName: item['CSI Name']\n      })))].filter(item => item.division) // Filter out empty values\n      .map(item => ({\n        value: item.division,\n        label: item.csiName ? `${item.division} - ${item.csiName}` : item.division\n      })).sort((a, b) => {\n        // Sort by division number\n        const numA = Number(a.value.replace(/\\D/g, ''));\n        const numB = Number(b.value.replace(/\\D/g, ''));\n        return numA - numB;\n      }),\n      wbsCategories: [...new Set(data.map(item => item['WBS Category Level 1']))].filter(Boolean).sort().map(cat => ({\n        value: cat,\n        label: cat\n      })),\n      durations: data.map(item => Number(item.Duration) || 0),\n      startDates: data.map(item => parseDate(item['Start Date'])).filter(Boolean),\n      endDates: data.map(item => parseDate(item['End Date'])).filter(Boolean)\n    };\n\n    // Get min and max dates\n    const minStartDate = processedData.startDates.length ? new Date(Math.min(...processedData.startDates)) : null;\n    const maxEndDate = processedData.endDates.length ? new Date(Math.max(...processedData.endDates)) : null;\n\n    // Log processed data for debugging\n    console.log('All Available Data:', {\n      rawData: data,\n      processedDivisions: processedData.divisions,\n      processedWBSCategories: processedData.wbsCategories,\n      dateRange: {\n        min: minStartDate,\n        max: maxEndDate\n      },\n      phases: processedData.phases,\n      durations: processedData.durations\n    });\n    return {\n      raw: data,\n      processed: processedData,\n      ranges: {\n        phase: [Math.min(...processedData.phases), Math.max(...processedData.phases)],\n        duration: [Math.min(...processedData.durations), Math.max(...processedData.durations)],\n        dates: {\n          min: minStartDate,\n          max: maxEndDate\n        }\n      }\n    };\n  } catch (error) {\n    console.error('Error fetching Airtable data:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["Airtable","base","apiKey","process","env","REACT_APP_AIRTABLE_API_KEY","fetchAirtableData","records","select","all","data","map","record","fields","console","log","slice","Object","keys","parseDate","dateStr","date","Date","isNaN","processedData","phases","Set","item","Number","Phase","divisions","division","csiName","filter","value","label","sort","a","b","numA","replace","numB","wbsCategories","Boolean","cat","durations","Duration","startDates","endDates","minStartDate","length","Math","min","maxEndDate","max","rawData","processedDivisions","processedWBSCategories","dateRange","raw","processed","ranges","phase","duration","dates","error"],"sources":["/home/vl_kuz/DAViN/src/services/airtable.js"],"sourcesContent":["import Airtable from 'airtable';\n\nconst base = new Airtable({\n    apiKey: process.env.REACT_APP_AIRTABLE_API_KEY\n}).base('appuojNVDfs9U7ccy');\n\nexport const fetchAirtableData = async () => {\n    try {\n        const records = await base('tbl60mtZmcPavvtQH').select().all();\n        const data = records.map(record => record.fields);\n\n        // Log all fields from the first few records to see the structure\n        console.log('Sample Records:', data.slice(0, 3));\n        console.log('Available Fields:', Object.keys(data[0] || {}));\n\n        // Helper function to parse date\n        const parseDate = (dateStr) => {\n            const date = new Date(dateStr);\n            return date instanceof Date && !isNaN(date) ? date : null;\n        };\n\n        // Process the data to get ranges and categories\n        const processedData = {\n            phases: [...new Set(data.map(item => Number(item.Phase) || 0))],\n            // Update division processing to use division and CSI Name\n            divisions: [...new Set(data.map(item => ({\n                division: item.division,\n                csiName: item['CSI Name']\n            })))]\n                .filter(item => item.division) // Filter out empty values\n                .map(item => ({\n                    value: item.division,\n                    label: item.csiName ? `${item.division} - ${item.csiName}` : item.division\n                }))\n                .sort((a, b) => {\n                    // Sort by division number\n                    const numA = Number(a.value.replace(/\\D/g, ''));\n                    const numB = Number(b.value.replace(/\\D/g, ''));\n                    return numA - numB;\n                }),\n            wbsCategories: [...new Set(data.map(item => item['WBS Category Level 1']))]\n                .filter(Boolean)\n                .sort()\n                .map(cat => ({\n                    value: cat,\n                    label: cat\n                })),\n            durations: data.map(item => Number(item.Duration) || 0),\n            startDates: data.map(item => parseDate(item['Start Date'])).filter(Boolean),\n            endDates: data.map(item => parseDate(item['End Date'])).filter(Boolean)\n        };\n\n        // Get min and max dates\n        const minStartDate = processedData.startDates.length\n            ? new Date(Math.min(...processedData.startDates))\n            : null;\n\n        const maxEndDate = processedData.endDates.length\n            ? new Date(Math.max(...processedData.endDates))\n            : null;\n\n        // Log processed data for debugging\n        console.log('All Available Data:', {\n            rawData: data,\n            processedDivisions: processedData.divisions,\n            processedWBSCategories: processedData.wbsCategories,\n            dateRange: { min: minStartDate, max: maxEndDate },\n            phases: processedData.phases,\n            durations: processedData.durations\n        });\n\n        return {\n            raw: data,\n            processed: processedData,\n            ranges: {\n                phase: [Math.min(...processedData.phases), Math.max(...processedData.phases)],\n                duration: [Math.min(...processedData.durations), Math.max(...processedData.durations)],\n                dates: {\n                    min: minStartDate,\n                    max: maxEndDate\n                }\n            }\n        };\n    } catch (error) {\n        console.error('Error fetching Airtable data:', error);\n        return null;\n    }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}