{"ast":null,"code":"import Airtable from 'airtable';\nconst base = new Airtable({\n  apiKey: process.env.REACT_APP_AIRTABLE_API_KEY\n}).base('appuojNVDfs9U7ccy');\nexport const fetchAirtableData = async () => {\n  try {\n    const records = await base('tbl60mtZmcPavvtQH').select().all();\n    const data = records.map(record => record.fields);\n\n    // Process the data to get ranges and categories\n    const processedData = {\n      phases: [...new Set(data.map(item => Number(item.Phase) || 0))],\n      divisions: [...new Set(data.map(item => Number(item.Division) || 0))],\n      wbsCategories: [...new Set(data.map(item => item['WBS Category']))].filter(Boolean).map(cat => ({\n        value: cat,\n        label: cat\n      })),\n      durations: data.map(item => Number(item.Duration) || 0),\n      percentCompletes: data.map(item => Number(item['% Complete']) || 0),\n      startDates: data.map(item => item['Start Date']),\n      endDates: data.map(item => item['End Date'])\n    };\n    return {\n      raw: data,\n      processed: processedData,\n      ranges: {\n        phase: [Math.min(...processedData.phases), Math.max(...processedData.phases)],\n        division: [Math.min(...processedData.divisions), Math.max(...processedData.divisions)],\n        duration: [Math.min(...processedData.durations), Math.max(...processedData.durations)],\n        percentComplete: [0, 100]\n      }\n    };\n  } catch (error) {\n    console.error('Error fetching Airtable data:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["Airtable","base","apiKey","process","env","REACT_APP_AIRTABLE_API_KEY","fetchAirtableData","records","select","all","data","map","record","fields","processedData","phases","Set","item","Number","Phase","divisions","Division","wbsCategories","filter","Boolean","cat","value","label","durations","Duration","percentCompletes","startDates","endDates","raw","processed","ranges","phase","Math","min","max","division","duration","percentComplete","error","console"],"sources":["/home/vl_kuz/DAViN/src/services/airtable.js"],"sourcesContent":["import Airtable from 'airtable';\n\nconst base = new Airtable({\n    apiKey: process.env.REACT_APP_AIRTABLE_API_KEY\n}).base('appuojNVDfs9U7ccy');\n\nexport const fetchAirtableData = async () => {\n    try {\n        const records = await base('tbl60mtZmcPavvtQH').select().all();\n        const data = records.map(record => record.fields);\n\n        // Process the data to get ranges and categories\n        const processedData = {\n            phases: [...new Set(data.map(item => Number(item.Phase) || 0))],\n            divisions: [...new Set(data.map(item => Number(item.Division) || 0))],\n            wbsCategories: [...new Set(data.map(item => item['WBS Category']))].filter(Boolean).map(cat => ({\n                value: cat,\n                label: cat\n            })),\n            durations: data.map(item => Number(item.Duration) || 0),\n            percentCompletes: data.map(item => Number(item['% Complete']) || 0),\n            startDates: data.map(item => item['Start Date']),\n            endDates: data.map(item => item['End Date'])\n        };\n\n        return {\n            raw: data,\n            processed: processedData,\n            ranges: {\n                phase: [Math.min(...processedData.phases), Math.max(...processedData.phases)],\n                division: [Math.min(...processedData.divisions), Math.max(...processedData.divisions)],\n                duration: [Math.min(...processedData.durations), Math.max(...processedData.durations)],\n                percentComplete: [0, 100]\n            }\n        };\n    } catch (error) {\n        console.error('Error fetching Airtable data:', error);\n        return null;\n    }\n}; "],"mappings":"AAAA,OAAOA,QAAQ,MAAM,UAAU;AAE/B,MAAMC,IAAI,GAAG,IAAID,QAAQ,CAAC;EACtBE,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC;AACxB,CAAC,CAAC,CAACJ,IAAI,CAAC,mBAAmB,CAAC;AAE5B,OAAO,MAAMK,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACA,MAAMC,OAAO,GAAG,MAAMN,IAAI,CAAC,mBAAmB,CAAC,CAACO,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC;IAC9D,MAAMC,IAAI,GAAGH,OAAO,CAACI,GAAG,CAACC,MAAM,IAAIA,MAAM,CAACC,MAAM,CAAC;;IAEjD;IACA,MAAMC,aAAa,GAAG;MAClBC,MAAM,EAAE,CAAC,GAAG,IAAIC,GAAG,CAACN,IAAI,CAACC,GAAG,CAACM,IAAI,IAAIC,MAAM,CAACD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;MAC/DC,SAAS,EAAE,CAAC,GAAG,IAAIJ,GAAG,CAACN,IAAI,CAACC,GAAG,CAACM,IAAI,IAAIC,MAAM,CAACD,IAAI,CAACI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;MACrEC,aAAa,EAAE,CAAC,GAAG,IAAIN,GAAG,CAACN,IAAI,CAACC,GAAG,CAACM,IAAI,IAAIA,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAACM,MAAM,CAACC,OAAO,CAAC,CAACb,GAAG,CAACc,GAAG,KAAK;QAC5FC,KAAK,EAAED,GAAG;QACVE,KAAK,EAAEF;MACX,CAAC,CAAC,CAAC;MACHG,SAAS,EAAElB,IAAI,CAACC,GAAG,CAACM,IAAI,IAAIC,MAAM,CAACD,IAAI,CAACY,QAAQ,CAAC,IAAI,CAAC,CAAC;MACvDC,gBAAgB,EAAEpB,IAAI,CAACC,GAAG,CAACM,IAAI,IAAIC,MAAM,CAACD,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC;MACnEc,UAAU,EAAErB,IAAI,CAACC,GAAG,CAACM,IAAI,IAAIA,IAAI,CAAC,YAAY,CAAC,CAAC;MAChDe,QAAQ,EAAEtB,IAAI,CAACC,GAAG,CAACM,IAAI,IAAIA,IAAI,CAAC,UAAU,CAAC;IAC/C,CAAC;IAED,OAAO;MACHgB,GAAG,EAAEvB,IAAI;MACTwB,SAAS,EAAEpB,aAAa;MACxBqB,MAAM,EAAE;QACJC,KAAK,EAAE,CAACC,IAAI,CAACC,GAAG,CAAC,GAAGxB,aAAa,CAACC,MAAM,CAAC,EAAEsB,IAAI,CAACE,GAAG,CAAC,GAAGzB,aAAa,CAACC,MAAM,CAAC,CAAC;QAC7EyB,QAAQ,EAAE,CAACH,IAAI,CAACC,GAAG,CAAC,GAAGxB,aAAa,CAACM,SAAS,CAAC,EAAEiB,IAAI,CAACE,GAAG,CAAC,GAAGzB,aAAa,CAACM,SAAS,CAAC,CAAC;QACtFqB,QAAQ,EAAE,CAACJ,IAAI,CAACC,GAAG,CAAC,GAAGxB,aAAa,CAACc,SAAS,CAAC,EAAES,IAAI,CAACE,GAAG,CAAC,GAAGzB,aAAa,CAACc,SAAS,CAAC,CAAC;QACtFc,eAAe,EAAE,CAAC,CAAC,EAAE,GAAG;MAC5B;IACJ,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO,IAAI;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}